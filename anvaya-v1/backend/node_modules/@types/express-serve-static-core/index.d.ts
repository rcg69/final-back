const express = require('express');
const router = express.Router();
const Message = require('../models/messageModel');

// POST /api/messages
// Send a new message (text message only). 
// Body should contain: sender (string), receiver (string), content (string)
router.post('/', async (req, res) => {
  try {
    const { sender, receiver, content } = req.body;

    if (!sender || !receiver) {
      return res.status(400).json({ error: 'sender and receiver are required' });
    }

    if ((!content || content.trim() === '') ) {
      return res.status(400).json({ error: 'Message content cannot be empty' });
    }

    const message = new Message({
      sender,
      receiver,
      content: content.trim(),
      timestamp: new Date(),
      read: false,
    });

    await message.save();

    res.status(201).json(message);
  } catch (error) {
    console.error('Error in POST /api/messages:', error);
    res.status(500).json({ error: 'Failed to send message' });
  }
});


// GET /api/messages/:otherUserId/:userId
// Fetch chat history between userId and otherUserId, sorted by timestamp ascending
router.get('/:otherUserId/:userId', async (req, res) => {
  try {
    const { userId, otherUserId } = req.params;

    if (!userId || !otherUserId) {
      return res.status(400).json({ error: 'Both userId and otherUserId are required' });
    }

    // Find messages exchanged between these two users and not deleted
    const messages = await Message.find({
      deleted: { $ne: true },
      $or: [
        { sender: userId, receiver: otherUserId },
        { sender: otherUserId, receiver: userId },
      ],
    }).sort({ timestamp: 1 }); // Oldest first

    res.json(messages);
  } catch (error) {
    console.error('Error in GET /api/messages/:otherUserId/:userId', error);
    res.status(500).json({ error: 'Failed to fetch messages' });
  }
});


// DELETE /api/messages/:messageId
// Soft-delete a message by setting `deleted` flag true
router.delete('/:messageId', async (req, res) => {
  try {
    const { messageId } = req.params;

    if (!messageId) {
      return res.status(400).json({ error: 'Message ID required' });
    }

    const message = await Message.findById(messageId);
    if (!message) {
      return res.status(404).json({ error: 'Message not found' });
    }

    message.deleted = true;
    await message.save();

    res.json({ success: true, message: 'Message deleted successfully' });
  } catch (error) {
    console.error('Error in DELETE /api/messages/:messageId', error);
    res.status(500).json({ error: 'Failed to delete message' });
  }
});

module.exports = router;
